@page
@model PIMIV.Pages.Tickets.CreateModel
@{
    ViewData["Title"] = "Novo Ticket";
}
<h2 class="mb-3">Novo Ticket</h2>
<p class="text-muted mb-4">Preencha os dados do chamado e salve-o. Em seguida, você poderá solicitar uma resposta automática da AjudAI.</p>
<form method="post" id="ticket-form" class="needs-validation" novalidate>
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Ticket.Titulo" class="form-label"></label>
                        <input asp-for="Ticket.Titulo" class="form-control" placeholder="Resumo do problema">
                        <span asp-validation-for="Ticket.Titulo" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Ticket.Descricao" class="form-label"></label>
                        <textarea asp-for="Ticket.Descricao" class="form-control" rows="5" placeholder="Descreva o problema"></textarea>
                        <span asp-validation-for="Ticket.Descricao" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Ticket.UsuarioId" class="form-label">Usuário</label>
                        <select asp-for="Ticket.UsuarioId" class="form-select" asp-items="ViewBag.UsuarioId"></select>
                        <span asp-validation-for="Ticket.UsuarioId" class="text-danger"></span>
                    </div>
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" id="submit-button">
                            <span class="spinner-border spinner-border-sm align-middle me-2 d-none" id="submit-spinner" role="status" aria-hidden="true"></span>
                            <span id="submit-label"><i class="bi bi-save me-1"></i>Salvar ticket</span>
                        </button>
                        <a asp-page="Index" class="btn btn-outline-secondary">Cancelar</a>
                    </div>
                    <div class="form-text mt-2">Após salvar, clique em “Gerar resposta da IA” para visualizar a sugestão automática.</div>
                </div>
            </div>
            <div id="alert-placeholder" class="mt-4"></div>
            <div id="ia-wrapper" class="mt-4 d-none">
                <div class="card shadow-sm" aria-live="polite">
                    <div class="card-header bg-primary text-white">
                        <strong>Interação com a AjudAI</strong>
                    </div>
                    <div class="card-body">
                        <div id="ia-status" class="alert alert-info mb-3"></div>
                        <div class="d-flex flex-column flex-lg-row align-items-lg-start gap-3">
                            <div class="flex-grow-1">
                                <button type="button" class="btn btn-outline-primary" id="generate-ia-button" disabled>
                                    <span class="spinner-border spinner-border-sm align-middle me-2 d-none" id="generate-ia-spinner" role="status" aria-hidden="true"></span>
                                    <span id="generate-ia-label"><i class="bi bi-stars me-1"></i>Gerar resposta da IA</span>
                                </button>
                            </div>
                        </div>
                        <div id="ia-loading" class="d-none mt-4 d-flex align-items-center gap-2">
                            <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                            <span>Gerando resposta inteligente...</span>
                        </div>
                        <div id="ia-response" class="d-none mt-4">
                            <p class="text-muted mb-2">Sugerimos os seguintes passos:</p>
                            <div class="ia-response-box">
                                <div id="ia-response-text" class="mb-0"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                        <small id="ia-meta" class="text-muted d-none"></small>
                        <a id="ia-details-link" class="btn btn-outline-primary btn-sm d-none" href="#">
                            Ver detalhes do ticket
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('ticket-form');
            if (!form) return;

            const submitButton = document.getElementById('submit-button');
            const submitLabel = document.getElementById('submit-label');
            const submitSpinner = document.getElementById('submit-spinner');
            const alertPlaceholder = document.getElementById('alert-placeholder');
            const iaWrapper = document.getElementById('ia-wrapper');
            const iaStatus = document.getElementById('ia-status');
            const iaLoading = document.getElementById('ia-loading');
            const iaResponse = document.getElementById('ia-response');
            const iaResponseText = document.getElementById('ia-response-text');
            const iaMeta = document.getElementById('ia-meta');
            const iaDetailsLink = document.getElementById('ia-details-link');
            const generateButton = document.getElementById('generate-ia-button');
            const generateSpinner = document.getElementById('generate-ia-spinner');
            const generateLabel = document.getElementById('generate-ia-label');

            let currentTicketId = null;

            const showAlert = (message, type = 'danger') => {
                alertPlaceholder.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
                    </div>`;
            };

            const toggleLoading = (isLoading) => {
                submitButton.disabled = isLoading;
                submitSpinner.classList.toggle('d-none', !isLoading);
                submitLabel.innerHTML = isLoading
                    ? '<i class="bi bi-hourglass-split me-1"></i>Salvando ticket...'
                    : '<i class="bi bi-save me-1"></i>Salvar ticket';
            };

            const resetIaView = () => {
                currentTicketId = null;
                iaWrapper.classList.add('d-none');
                iaStatus.textContent = '';
                iaStatus.className = 'alert alert-info mb-3';
                iaLoading.classList.add('d-none');
                iaResponse.classList.add('d-none');
                iaResponseText.textContent = '';
                iaMeta.classList.add('d-none');
                iaMeta.textContent = '';
                iaDetailsLink.classList.add('d-none');
                iaDetailsLink.removeAttribute('href');
                if (generateButton) {
                    generateButton.disabled = true;
                }
                if (generateSpinner) {
                    generateSpinner.classList.add('d-none');
                }
                if (generateLabel) {
                    generateLabel.innerHTML = '<i class="bi bi-stars me-1"></i>Gerar resposta da IA';
                }
            };

            const toggleGenerateLoading = (isLoading) => {
                if (!generateButton || !generateSpinner || !generateLabel) return;
                generateButton.disabled = isLoading;
                generateSpinner.classList.toggle('d-none', !isLoading);
                generateLabel.innerHTML = isLoading
                    ? '<i class="bi bi-hourglass-split me-1"></i>Gerando resposta...'
                    : (iaResponse.classList.contains('d-none')
                        ? '<i class="bi bi-stars me-1"></i>Gerar resposta da IA'
                        : '<i class="bi bi-arrow-repeat me-1"></i>Gerar novamente');
            };

            const prepareIaCard = (ticket) => {
                iaWrapper.classList.remove('d-none');
                iaLoading.classList.add('d-none');
                iaResponse.classList.add('d-none');
                iaResponseText.textContent = '';

                currentTicketId = ticket?.id ?? null;

                const geradoEm = ticket?.dataAbertura
                    ? new Date(ticket.dataAbertura).toLocaleString('pt-BR')
                    : new Date().toLocaleString('pt-BR');

                if (currentTicketId) {
                    iaStatus.className = 'alert alert-info mb-3';
                    iaStatus.textContent = `Ticket #${currentTicketId} salvo. Clique em "Gerar resposta da IA" para receber a orientação automática.`;
                    iaMeta.textContent = `Ticket salvo em ${geradoEm}.`;
                    iaMeta.classList.remove('d-none');
                    iaDetailsLink.href = `/Tickets/Details?id=${currentTicketId}`;
                    iaDetailsLink.classList.remove('d-none');
                    if (generateButton) {
                        generateButton.disabled = false;
                    }
                    if (generateLabel) {
                        generateLabel.innerHTML = '<i class="bi bi-stars me-1"></i>Gerar resposta da IA';
                    }
                }
                else {
                    iaStatus.className = 'alert alert-warning mb-3';
                    iaStatus.textContent = 'Ticket salvo, mas o identificador não foi retornado. Gere a resposta da IA pela listagem de tickets.';
                    if (generateButton) {
                        generateButton.disabled = true;
                    }
                }
            };

            resetIaView();

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                form.classList.remove('was-validated');
                alertPlaceholder.innerHTML = '';
                resetIaView();
                toggleLoading(true);

                const titulo = form.querySelector('[name="Ticket.Titulo"]').value.trim();
                const descricao = form.querySelector('[name="Ticket.Descricao"]').value.trim();
                const usuarioValue = form.querySelector('[name="Ticket.UsuarioId"]').value;

                const usuarioId = usuarioValue ? Number(usuarioValue) : null;
                const payload = {
                    titulo,
                    descricao,
                    usuarioId: Number.isNaN(usuarioId) ? null : usuarioId
                };

                try {
                    const response = await fetch('/api/ticketsapi/abrir', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const contentType = response.headers.get('content-type') || '';
                    const isJson = contentType.includes('application/json');
                    const data = isJson ? await response.json() : await response.text();

                    if (!response.ok) {
                        const message = typeof data === 'string' && data
                            ? data
                            : (data?.mensagem ?? 'Não foi possível abrir o ticket.');
                        throw new Error(message);
                    }

                    const mensagem = data?.mensagem ?? 'Ticket criado com sucesso!';
                    showAlert(mensagem, 'success');

                    const ticket = data?.ticket ?? {};
                    prepareIaCard(ticket);

                    form.reset();
                } catch (error) {
                    showAlert(error.message || 'Erro inesperado ao abrir o ticket.', 'danger');
                } finally {
                    toggleLoading(false);
                }
            });

            if (generateButton) {
                generateButton.addEventListener('click', async () => {
                    if (!currentTicketId) {
                        iaStatus.className = 'alert alert-warning mb-3';
                        iaStatus.textContent = 'Salve o ticket antes de solicitar a resposta automática.';
                        return;
                    }

                    iaStatus.className = 'alert alert-info mb-3';
                    iaStatus.textContent = 'Consultando a IA, aguarde alguns instantes...';
                    iaResponse.classList.add('d-none');
                    iaResponseText.textContent = '';
                    iaLoading.classList.remove('d-none');
                    toggleGenerateLoading(true);

                    try {
                        const response = await fetch(`/api/ticketsapi/${currentTicketId}/responder`, { method: 'POST' });
                        const contentType = response.headers.get('content-type') || '';
                        const isJson = contentType.includes('application/json');
                        const data = isJson ? await response.json() : await response.text();

                        if (!response.ok) {
                            const message = typeof data === 'string' && data
                                ? data
                                : (data?.mensagem ?? 'Não foi possível gerar a resposta da IA.');
                            throw new Error(message);
                        }

                        const respostaIa = (data?.respostaIA ?? '').trim();
                        iaLoading.classList.add('d-none');
                        iaResponse.classList.remove('d-none');
                        iaResponseText.textContent = respostaIa || 'A IA não retornou uma sugestão. Tente novamente em alguns instantes.';

                        iaStatus.className = 'alert alert-success mb-3';
                        iaStatus.textContent = 'Resposta gerada com sucesso!';

                        const atualizadoEm = new Date().toLocaleString('pt-BR');
                        iaMeta.textContent = `Resposta atualizada em ${atualizadoEm}.`;
                        iaMeta.classList.remove('d-none');

                        if (generateLabel) {
                            generateLabel.innerHTML = '<i class="bi bi-arrow-repeat me-1"></i>Gerar novamente';
                        }
                    } catch (error) {
                        iaLoading.classList.add('d-none');
                        iaResponse.classList.add('d-none');
                        iaResponseText.textContent = '';
                        iaStatus.className = 'alert alert-danger mb-3';
                        iaStatus.textContent = error.message || 'Erro inesperado ao gerar a resposta da IA.';
                    } finally {
                        toggleGenerateLoading(false);
                    }
                });
            }
        });
    </script>
}

@section Styles {
    <style>
        .ia-response-box {
            background-color: #f8f9fa;
            border: 1px solid var(--bs-border-color, #dee2e6);
            border-radius: 0.5rem;
            padding: 1rem;
            max-height: 260px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-break: break-word;
        }
    </style>
}