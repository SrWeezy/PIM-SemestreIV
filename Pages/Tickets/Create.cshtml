@page
@model PIMIV.Pages.Tickets.CreateModel
@{
    ViewData["Title"] = "Novo Ticket";
}
<h2 class="mb-3">Novo Ticket</h2>
<p class="text-muted mb-4">
    Preencha os dados do chamado e aguarde alguns segundos para que a AjudAI sugira a melhor solução automaticamente.
</p>

<form id="ticket-form" class="needs-validation" novalidate>
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Ticket.Titulo" class="form-label"></label>
                        <input asp-for="Ticket.Titulo" class="form-control" placeholder="Resumo do problema">
                        <span asp-validation-for="Ticket.Titulo" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Ticket.Descricao" class="form-label"></label>
                        <textarea asp-for="Ticket.Descricao" class="form-control" rows="5" placeholder="Descreva o problema"></textarea>
                        <span asp-validation-for="Ticket.Descricao" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Ticket.UsuarioId" class="form-label">Usuário</label>
                        <select asp-for="Ticket.UsuarioId" class="form-select" asp-items="ViewBag.UsuarioId"></select>
                        <span asp-validation-for="Ticket.UsuarioId" class="text-danger"></span>
                    </div>
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" id="submit-button">
                            <span class="spinner-border spinner-border-sm align-middle me-2 d-none" id="submit-spinner" role="status" aria-hidden="true"></span>
                            <span id="submit-label"><i class="bi bi-stars me-1"></i>Salvar e gerar com IA</span>
                        </button>
                        <a asp-page="Index" class="btn btn-outline-secondary">Cancelar</a>
                    </div>
                    <div class="form-text mt-2">A resposta será exibida logo abaixo assim que o ticket for salvo.</div>
                </div>
            </div>
            <div id="alert-placeholder" class="mt-4"></div>
            <div id="ia-result-card" class="card shadow-sm mt-3 d-none" aria-live="polite">
                <div class="card-header bg-primary text-white">
                    <strong>Resposta da AjudAI</strong>
                </div>
                <div class="card-body">
                    <div id="ia-loading" class="d-flex align-items-center gap-2">
                        <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                        <span>Gerando resposta inteligente...</span>
                    </div>
                    <div id="ia-response" class="d-none">
                        <p class="text-muted mb-2">Sugerimos os seguintes passos:</p>
                        <div class="bg-light border rounded p-3">
                            <pre id="ia-response-text" class="mb-0 text-break" style="white-space: pre-wrap;"></pre>
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                    <small id="ia-meta" class="text-muted d-none"></small>
                    <a id="ia-details-link" class="btn btn-outline-light btn-sm d-none" href="#">
                        Ver detalhes do ticket
                    </a>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('ticket-form');
            if (!form) return;

            const submitButton = document.getElementById('submit-button');
            const submitLabel = document.getElementById('submit-label');
            const submitSpinner = document.getElementById('submit-spinner');
            const alertPlaceholder = document.getElementById('alert-placeholder');
            const iaCard = document.getElementById('ia-result-card');
            const iaLoading = document.getElementById('ia-loading');
            const iaResponse = document.getElementById('ia-response');
            const iaResponseText = document.getElementById('ia-response-text');
            const iaMeta = document.getElementById('ia-meta');
            const iaDetailsLink = document.getElementById('ia-details-link');

            const statusMap = { 0: 'Aberto', 1: 'Em andamento', 2: 'Fechado' };
            const prioridadeMap = { 0: 'Baixa', 1: 'Média', 2: 'Alta' };

            const showAlert = (message, type = 'danger') => {
                alertPlaceholder.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
                    </div>`;
            };

            const toggleLoading = (isLoading) => {
                submitButton.disabled = isLoading;
                submitSpinner.classList.toggle('d-none', !isLoading);
                submitLabel.innerHTML = isLoading
                    ? '<i class="bi bi-hourglass-split me-1"></i>Gerando resposta...'
                    : '<i class="bi bi-stars me-1"></i>Salvar e gerar com IA';
            };

            const resetIaCard = () => {
                iaCard.classList.add('d-none');
                iaLoading.classList.remove('d-none');
                iaResponse.classList.add('d-none');
                iaResponseText.textContent = '';
                iaMeta.classList.add('d-none');
                iaMeta.textContent = '';
                iaDetailsLink.classList.add('d-none');
                iaDetailsLink.removeAttribute('href');
            };

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                form.classList.remove('was-validated');
                alertPlaceholder.innerHTML = '';
                resetIaCard();
                iaCard.classList.remove('d-none');
                toggleLoading(true);

                const titulo = form.querySelector('[name="Ticket.Titulo"]').value.trim();
                const descricao = form.querySelector('[name="Ticket.Descricao"]').value.trim();
                const usuarioValue = form.querySelector('[name="Ticket.UsuarioId"]').value;
                const usuarioId = usuarioValue ? Number(usuarioValue) : null;

                const payload = {
                    titulo,
                    descricao,
                    usuarioId: Number.isNaN(usuarioId) ? null : usuarioId
                };

                try {
                    const response = await fetch('/api/ticketsapi/abrir', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data?.mensagem ?? 'Falha ao abrir o ticket.');

                    showAlert(data?.mensagem ?? 'Ticket criado com sucesso!', 'success');

                    const ticket = data?.ticket ?? {};
                    const respostaIa = (data?.respostaIA ?? ticket?.respostaIA ?? '').trim();

                    iaLoading.classList.add('d-none');
                    iaResponse.classList.remove('d-none');
                    iaResponseText.textContent = respostaIa || 'A IA não retornou uma sugestão.';

                    if (ticket?.id) {
                        const abertoEm = ticket?.dataAbertura
                            ? new Date(ticket.dataAbertura).toLocaleString('pt-BR')
                            : new Date().toLocaleString('pt-BR');
                        const status = statusMap[ticket?.status] ?? 'Aberto';
                        const prioridade = prioridadeMap[ticket?.prioridade] ?? 'Média';

                        iaMeta.textContent = `Ticket #${ticket.id} salvo em ${abertoEm} · ${status} · Prioridade ${prioridade}`;
                        iaMeta.classList.remove('d-none');
                        iaDetailsLink.href = `/Tickets/Details?id=${ticket.id}`;
                        iaDetailsLink.classList.remove('d-none');
                    }

                    form.reset();
                } catch (error) {
                    iaCard.classList.add('d-none');
                    showAlert(error.message || 'Erro inesperado ao abrir o ticket.', 'danger');
                } finally {
                    toggleLoading(false);
                }
            });
        });
    </script>
}
